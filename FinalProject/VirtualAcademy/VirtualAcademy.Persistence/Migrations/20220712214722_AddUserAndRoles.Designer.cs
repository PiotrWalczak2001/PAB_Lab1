// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using VirtualAcademy.Persistence;

#nullable disable

namespace VirtualAcademy.Persistence.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20220712214722_AddUserAndRoles")]
    partial class AddUserAndRoles
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "bb352f3f-dfd1-4c23-a879-84a8885107c6",
                            ConcurrencyStamp = "d34967dd-f8fd-49cb-84fa-ae1002f3cbc8",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "29f2dfb3-e391-4b46-9c1b-dfd360bdc40f",
                            ConcurrencyStamp = "71107636-9130-4a36-81fa-0ea9736b533a",
                            Name = "Lecturer",
                            NormalizedName = "LECTURER"
                        },
                        new
                        {
                            Id = "9c0a5871-fd62-46f6-9aa0-6253ddf8436a",
                            ConcurrencyStamp = "f60b7a0b-4fa6-49c9-9ba3-831629a858de",
                            Name = "Student",
                            NormalizedName = "STUDENT"
                        },
                        new
                        {
                            Id = "41955396-834b-4ee6-901a-fc9dfbd0b92d",
                            ConcurrencyStamp = "9920dbe1-03aa-45d6-9335-b95b4d1ff7c8",
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "d2420772-683a-40ad-a5b7-9bf93cccc1df",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "1008b5ac-d36c-4f97-8d30-7b880b5192ee",
                            Email = "testadmin@mail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "TESTADMIN@MAIL.COM",
                            NormalizedUserName = "TEST ADMIN",
                            PasswordHash = "AQAAAAEAACcQAAAAEHwwdv+jBsj1W2CGZmRPADLC/vGPdmg1bJWHv/BOyxTxSQNbCOypiBED/gdBMSRfcQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "3af09193-19bf-494c-8c47-3d2921ecc86b",
                            TwoFactorEnabled = false,
                            UserName = "Test Admin"
                        },
                        new
                        {
                            Id = "1737574a-e41b-4f2d-b288-da7c2323b4e6",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a8116ca9-77e7-49ff-9b55-0ffc51d0777f",
                            Email = "testlecturer@mail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "TESTLECTURER@MAIL.COM",
                            NormalizedUserName = "TEST LECTURER",
                            PasswordHash = "AQAAAAEAACcQAAAAEDWFC7BCTe4A3J4Pp5mKK7umF7lBmGaMyIM2v14Ojw1eJOvBLhyJq/ujYBcLTgVmXw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "18379c17-efe4-4deb-85b0-6d5b4a5555fa",
                            TwoFactorEnabled = false,
                            UserName = "Test Lecturer"
                        },
                        new
                        {
                            Id = "dcf71a67-2e23-4582-a461-bf856c1133e3",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "50472455-1c91-47bb-ba63-9c925b3695b3",
                            Email = "teststudent@mail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "TESTSTUDENT@MAIL.COM",
                            NormalizedUserName = "TEST STUDENT",
                            PasswordHash = "AQAAAAEAACcQAAAAEOc7jRhEQYmCMnpuiyRZ80kV9v9ZROcEKsiywJIik7pdrjAr3rjBjMxVi3pr4rMUNw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "c23db69d-1092-4c03-8e92-20095f197bbe",
                            TwoFactorEnabled = false,
                            UserName = "Test Student"
                        },
                        new
                        {
                            Id = "63f3fc0b-ee4a-453e-802b-7e6b554d798f",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "af300b55-f58f-42c8-9c35-324565a0e5fe",
                            Email = "testuser@mail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "TESTUSER@MAIL.COM",
                            NormalizedUserName = "TEST USER",
                            PasswordHash = "AQAAAAEAACcQAAAAEIq5BLJINfJ55FHLvAc59tW/5fGWIQzDZMfdHA6VD2T/kD7B/9UGHnko6kJ7w0+GrQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "49a84c86-71d9-4f0c-9deb-892e8140044a",
                            TwoFactorEnabled = false,
                            UserName = "Test User"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "d2420772-683a-40ad-a5b7-9bf93cccc1df",
                            RoleId = "bb352f3f-dfd1-4c23-a879-84a8885107c6"
                        },
                        new
                        {
                            UserId = "1737574a-e41b-4f2d-b288-da7c2323b4e6",
                            RoleId = "29f2dfb3-e391-4b46-9c1b-dfd360bdc40f"
                        },
                        new
                        {
                            UserId = "dcf71a67-2e23-4582-a461-bf856c1133e3",
                            RoleId = "9c0a5871-fd62-46f6-9aa0-6253ddf8436a"
                        },
                        new
                        {
                            UserId = "63f3fc0b-ee4a-453e-802b-7e6b554d798f",
                            RoleId = "41955396-834b-4ee6-901a-fc9dfbd0b92d"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("VirtualAcademy.Domain.Entities.Academy", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ImageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShortDecription")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Academies");
                });

            modelBuilder.Entity("VirtualAcademy.Domain.Entities.Course", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AcademyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AcademyId");

                    b.ToTable("Courses");
                });

            modelBuilder.Entity("VirtualAcademy.Domain.Entities.Department", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AcademyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AcademyId");

                    b.ToTable("Departments");
                });

            modelBuilder.Entity("VirtualAcademy.Domain.Entities.Employee", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AcademyEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("AcademyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Citizenship")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CountryDocumentCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("EmployeeCode")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("EndOfWorkDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsLecturer")
                        .HasColumnType("bit");

                    b.Property<string>("Nationality")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PostOffice")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PrivateEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RecruitmentDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("SecondName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("StillWorking")
                        .HasColumnType("bit");

                    b.Property<string>("Street")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Surname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ZipCode")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AcademyId");

                    b.ToTable("Employees");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Employee");
                });

            modelBuilder.Entity("VirtualAcademy.Domain.Entities.File", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AcademyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AcademyId1")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Extension")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("FileContentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AcademyId");

                    b.HasIndex("AcademyId1")
                        .IsUnique()
                        .HasFilter("[AcademyId1] IS NOT NULL");

                    b.ToTable("Files");
                });

            modelBuilder.Entity("VirtualAcademy.Domain.Entities.FileContent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Content")
                        .HasColumnType("varbinary(max)");

                    b.Property<Guid>("FileId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("FileId")
                        .IsUnique();

                    b.ToTable("FileContents");
                });

            modelBuilder.Entity("VirtualAcademy.Domain.Entities.Group", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CourseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("GroupType")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SemesterType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.ToTable("Groups");
                });

            modelBuilder.Entity("VirtualAcademy.Domain.Entities.Semester", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<double?>("Average")
                        .HasColumnType("float");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("SemesterType")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<Guid>("StudentId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("StudentId");

                    b.ToTable("Semesters");
                });

            modelBuilder.Entity("VirtualAcademy.Domain.Entities.Student", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AcademyEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("AcademyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("BirthPlace")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Citizenship")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Code")
                        .HasColumnType("int");

                    b.Property<string>("CountryDocumentCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("CourseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CurrentSemesterId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CurrentSemesterId1")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ExpectedGraduationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FatherMaidenName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FatherName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("IdentityCardIssuedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IndividualCourse")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsStudying")
                        .HasColumnType("bit");

                    b.Property<string>("MotherMaidenName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MotherName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nationality")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PostOffice")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PrivateEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RecruitmentDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("SecondName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SeriesAndNumberIdentityCard")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartStudiesDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Street")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Surname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TitleAfterGraduation")
                        .HasColumnType("int");

                    b.Property<int>("YearOfStudy")
                        .HasColumnType("int");

                    b.Property<string>("ZipCode")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AcademyId");

                    b.HasIndex("CourseId");

                    b.HasIndex("CurrentSemesterId1");

                    b.ToTable("Students");
                });

            modelBuilder.Entity("VirtualAcademy.Domain.Entities.StudentGroup", b =>
                {
                    b.Property<Guid>("StudentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("GroupId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("StudentId", "GroupId");

                    b.HasIndex("GroupId");

                    b.ToTable("StudentGroups");
                });

            modelBuilder.Entity("VirtualAcademy.Domain.Entities.StudentNote", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateOfNote")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("LecturerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("StudentId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("LecturerId");

                    b.HasIndex("StudentId");

                    b.ToTable("StudentNotes");
                });

            modelBuilder.Entity("VirtualAcademy.Domain.Entities.Subject", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CourseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("FormOfFinalSubjectPass")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("LecturerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SubjectType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("LecturerId");

                    b.ToTable("Subjects");
                });

            modelBuilder.Entity("VirtualAcademy.Domain.Entities.SubjectGroup", b =>
                {
                    b.Property<Guid>("SubjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("GroupId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("SubjectId", "GroupId");

                    b.HasIndex("GroupId");

                    b.ToTable("SubjectGroups");
                });

            modelBuilder.Entity("VirtualAcademy.Domain.Entities.SubjectMark", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateOfGetMark")
                        .HasColumnType("datetime2");

                    b.Property<int>("FormOfPass")
                        .HasColumnType("int");

                    b.Property<bool?>("IsFinalMark")
                        .HasColumnType("bit");

                    b.Property<Guid>("LecturerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SemesterId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SubjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Value")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("LecturerId");

                    b.HasIndex("SemesterId");

                    b.HasIndex("SubjectId");

                    b.ToTable("SubjectMarks");
                });

            modelBuilder.Entity("VirtualAcademy.Domain.Entities.Lecturer", b =>
                {
                    b.HasBaseType("VirtualAcademy.Domain.Entities.Employee");

                    b.Property<Guid>("DepartmentId")
                        .HasColumnType("uniqueidentifier");

                    b.HasIndex("DepartmentId");

                    b.HasDiscriminator().HasValue("Lecturer");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("VirtualAcademy.Domain.Entities.Course", b =>
                {
                    b.HasOne("VirtualAcademy.Domain.Entities.Academy", "Academy")
                        .WithMany("Courses")
                        .HasForeignKey("AcademyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Academy");
                });

            modelBuilder.Entity("VirtualAcademy.Domain.Entities.Department", b =>
                {
                    b.HasOne("VirtualAcademy.Domain.Entities.Academy", "Academy")
                        .WithMany("Departments")
                        .HasForeignKey("AcademyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Academy");
                });

            modelBuilder.Entity("VirtualAcademy.Domain.Entities.Employee", b =>
                {
                    b.HasOne("VirtualAcademy.Domain.Entities.Academy", "Academy")
                        .WithMany("Employees")
                        .HasForeignKey("AcademyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Academy");
                });

            modelBuilder.Entity("VirtualAcademy.Domain.Entities.File", b =>
                {
                    b.HasOne("VirtualAcademy.Domain.Entities.Academy", "Academy")
                        .WithMany("Files")
                        .HasForeignKey("AcademyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VirtualAcademy.Domain.Entities.Academy", null)
                        .WithOne("ImageFile")
                        .HasForeignKey("VirtualAcademy.Domain.Entities.File", "AcademyId1");

                    b.Navigation("Academy");
                });

            modelBuilder.Entity("VirtualAcademy.Domain.Entities.FileContent", b =>
                {
                    b.HasOne("VirtualAcademy.Domain.Entities.File", "File")
                        .WithOne("Content")
                        .HasForeignKey("VirtualAcademy.Domain.Entities.FileContent", "FileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("File");
                });

            modelBuilder.Entity("VirtualAcademy.Domain.Entities.Group", b =>
                {
                    b.HasOne("VirtualAcademy.Domain.Entities.Course", "Course")
                        .WithMany("Groups")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");
                });

            modelBuilder.Entity("VirtualAcademy.Domain.Entities.Semester", b =>
                {
                    b.HasOne("VirtualAcademy.Domain.Entities.Student", "Student")
                        .WithMany("Semesters")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Student");
                });

            modelBuilder.Entity("VirtualAcademy.Domain.Entities.Student", b =>
                {
                    b.HasOne("VirtualAcademy.Domain.Entities.Academy", "Academy")
                        .WithMany("Students")
                        .HasForeignKey("AcademyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VirtualAcademy.Domain.Entities.Course", "Course")
                        .WithMany("Students")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("VirtualAcademy.Domain.Entities.Semester", "CurrentSemester")
                        .WithMany()
                        .HasForeignKey("CurrentSemesterId1");

                    b.Navigation("Academy");

                    b.Navigation("Course");

                    b.Navigation("CurrentSemester");
                });

            modelBuilder.Entity("VirtualAcademy.Domain.Entities.StudentGroup", b =>
                {
                    b.HasOne("VirtualAcademy.Domain.Entities.Group", "Group")
                        .WithMany("StudentGroups")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VirtualAcademy.Domain.Entities.Student", "Student")
                        .WithMany("StudentGroups")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Group");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("VirtualAcademy.Domain.Entities.StudentNote", b =>
                {
                    b.HasOne("VirtualAcademy.Domain.Entities.Lecturer", "Lecturer")
                        .WithMany("StudentNotes")
                        .HasForeignKey("LecturerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VirtualAcademy.Domain.Entities.Student", "Student")
                        .WithMany("StudentNotes")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Lecturer");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("VirtualAcademy.Domain.Entities.Subject", b =>
                {
                    b.HasOne("VirtualAcademy.Domain.Entities.Course", "Course")
                        .WithMany("Subjects")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VirtualAcademy.Domain.Entities.Lecturer", "Lecturer")
                        .WithMany("Subjects")
                        .HasForeignKey("LecturerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Lecturer");
                });

            modelBuilder.Entity("VirtualAcademy.Domain.Entities.SubjectGroup", b =>
                {
                    b.HasOne("VirtualAcademy.Domain.Entities.Group", "Group")
                        .WithMany("SubjectGroups")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VirtualAcademy.Domain.Entities.Subject", "Subject")
                        .WithMany("SubjectGroups")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Group");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("VirtualAcademy.Domain.Entities.SubjectMark", b =>
                {
                    b.HasOne("VirtualAcademy.Domain.Entities.Lecturer", "Lecturer")
                        .WithMany("Marks")
                        .HasForeignKey("LecturerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VirtualAcademy.Domain.Entities.Semester", "Semester")
                        .WithMany("Marks")
                        .HasForeignKey("SemesterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VirtualAcademy.Domain.Entities.Subject", "Subject")
                        .WithMany("Marks")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Lecturer");

                    b.Navigation("Semester");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("VirtualAcademy.Domain.Entities.Lecturer", b =>
                {
                    b.HasOne("VirtualAcademy.Domain.Entities.Department", "Department")
                        .WithMany("Lecturers")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Department");
                });

            modelBuilder.Entity("VirtualAcademy.Domain.Entities.Academy", b =>
                {
                    b.Navigation("Courses");

                    b.Navigation("Departments");

                    b.Navigation("Employees");

                    b.Navigation("Files");

                    b.Navigation("ImageFile");

                    b.Navigation("Students");
                });

            modelBuilder.Entity("VirtualAcademy.Domain.Entities.Course", b =>
                {
                    b.Navigation("Groups");

                    b.Navigation("Students");

                    b.Navigation("Subjects");
                });

            modelBuilder.Entity("VirtualAcademy.Domain.Entities.Department", b =>
                {
                    b.Navigation("Lecturers");
                });

            modelBuilder.Entity("VirtualAcademy.Domain.Entities.File", b =>
                {
                    b.Navigation("Content");
                });

            modelBuilder.Entity("VirtualAcademy.Domain.Entities.Group", b =>
                {
                    b.Navigation("StudentGroups");

                    b.Navigation("SubjectGroups");
                });

            modelBuilder.Entity("VirtualAcademy.Domain.Entities.Semester", b =>
                {
                    b.Navigation("Marks");
                });

            modelBuilder.Entity("VirtualAcademy.Domain.Entities.Student", b =>
                {
                    b.Navigation("Semesters");

                    b.Navigation("StudentGroups");

                    b.Navigation("StudentNotes");
                });

            modelBuilder.Entity("VirtualAcademy.Domain.Entities.Subject", b =>
                {
                    b.Navigation("Marks");

                    b.Navigation("SubjectGroups");
                });

            modelBuilder.Entity("VirtualAcademy.Domain.Entities.Lecturer", b =>
                {
                    b.Navigation("Marks");

                    b.Navigation("StudentNotes");

                    b.Navigation("Subjects");
                });
#pragma warning restore 612, 618
        }
    }
}
